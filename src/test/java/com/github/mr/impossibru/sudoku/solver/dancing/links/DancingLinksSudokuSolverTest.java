package com.github.mr.impossibru.sudoku.solver.dancing.links;

import com.github.mr.impossibru.sudoku.solver.SudokuSolver;
import com.github.mr.impossibru.sudoku.solver.util.SudokuUtil;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class DancingLinksSudokuSolverTest {

    private SudokuSolver sudokuSolver;

    @Test
    void sudoku_4x4_OneSolution() {
        int[][] initialState = {
                {4, 2, 1, 3},
                {0, 1, 2, 4},
                {1, 3, 4, 2},
                {2, 4, 3, 1},
        };
        Integer[][] expected = {
                {4, 2, 1, 3},
                {3, 1, 2, 4},
                {1, 3, 4, 2},
                {2, 4, 3, 1},
        };

        sudokuSolver = new DancingLinksSudokuSolver();
        List<Integer[][]> actual = sudokuSolver.solve(initialState);
        SudokuUtil.printSudokuBoard(actual);
        assertEquals(1, actual.size());
        assertArrayEquals(expected, actual.get(0));
    }

    @Test
    void sudoku_4x4_MultipleSolutions() {
        int[][] initialState = {
                {0, 0, 0, 3},
                {0, 0, 0, 0},
                {1, 0, 4, 0},
                {0, 0, 0, 1},
        };
        Integer[][] expectedFirst = {
                {2, 4, 1, 3},
                {3, 1, 2, 4},
                {1, 3, 4, 2},
                {4, 2, 3, 1}
        };
        Integer[][] expectedSecond = {
                {4, 1, 2, 3},
                {3, 2, 1, 4},
                {1, 3, 4, 2},
                {2, 4, 3, 1}
        };
        Integer[][] expectedThird = {
                {4, 2, 1, 3},
                {3, 1, 2, 4},
                {1, 3, 4, 2},
                {2, 4, 3, 1}
        };

        sudokuSolver = new DancingLinksSudokuSolver();
        List<Integer[][]> actual = sudokuSolver.solve(initialState);
        SudokuUtil.printSudokuBoard(actual);
        assertEquals(3, actual.size());
        assertArrayEquals(expectedFirst, actual.get(0));
        assertArrayEquals(expectedSecond, actual.get(1));
        assertArrayEquals(expectedThird, actual.get(2));
    }

    @Test
    void sudoku_4x4_AllCombinations() {
        int[][] initialState = {
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
        };

        sudokuSolver = new DancingLinksSudokuSolver();
        List<Integer[][]> actual = sudokuSolver.solve(initialState);
        assertEquals(288, actual.size());
        SudokuUtil.printSudokuBoard(actual);
    }

    @Test
    void sudoku_9x9_OneSolution() {
        int[][] initialState = {
                {8, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 3, 6, 0, 0, 0, 0, 0},
                {0, 7, 0, 0, 9, 0, 2, 0, 0},
                {0, 5, 0, 0, 0, 7, 0, 0, 0},
                {0, 0, 0, 0, 4, 5, 7, 0, 0},
                {0, 0, 0, 1, 0, 0, 0, 3, 0},
                {0, 0, 1, 0, 0, 0, 0, 6, 8},
                {0, 0, 8, 5, 0, 0, 0, 1, 0},
                {0, 9, 0, 0, 0, 0, 4, 0, 0}
        };
        Integer[][] expected = {
                {8, 1, 2, 7, 5, 3, 6, 4, 9},
                {9, 4, 3, 6, 8, 2, 1, 7, 5},
                {6, 7, 5, 4, 9, 1, 2, 8, 3},
                {1, 5, 4, 2, 3, 7, 8, 9, 6},
                {3, 6, 9, 8, 4, 5, 7, 2, 1},
                {2, 8, 7, 1, 6, 9, 5, 3, 4},
                {5, 2, 1, 9, 7, 4, 3, 6, 8},
                {4, 3, 8, 5, 2, 6, 9, 1, 7},
                {7, 9, 6, 3, 1, 8, 4, 5, 2}
        };

        sudokuSolver = new DancingLinksSudokuSolver();
        List<Integer[][]> actual = sudokuSolver.solve(initialState);
        SudokuUtil.printSudokuBoard(actual);
        assertEquals(1, actual.size());
        assertArrayEquals(expected, actual.get(0));
    }

    @Test
    void sudoku_16x16_OneSolution() {
        int[][] initialState = {
                { 1,  0,  0,  2, /**/  3,  4,  0,  0, /**/ 12,  0,  6,  0, /**/  0,  0,  7,  0},
                { 0,  0,  8,  0, /**/  0,  0,  7,  0, /**/  0,  3,  0,  0, /**/  9, 10,  6, 11},
                { 0, 12,  0,  0, /**/ 10,  0,  0,  1, /**/  0, 13,  0, 11, /**/  0,  0, 14,  0},
                { 3,  0,  0, 15, /**/  2,  0,  0, 14, /**/  0,  0,  0,  9, /**/  0,  0, 12,  0},

                {13,  0,  0,  0, /**/  8,  0,  0, 10, /**/  0, 12,  2,  0, /**/  1, 15,  0,  0},
                { 0, 11,  7,  6, /**/  0,  0,  0, 16, /**/  0,  0,  0, 15, /**/  0,  0,  5, 13},
                { 0,  0,  0, 10, /**/  0,  5, 15,  0, /**/  0,  4,  0,  8, /**/  0,  0, 11,  0},
                {16,  0,  0,  5, /**/  9, 12,  0,  0, /**/  1,  0,  0,  0, /**/  0,  0,  8,  0},

                { 0,  2,  0,  0, /**/  0,  0,  0, 13, /**/  0,  0, 12,  5, /**/  8,  0,  0,  3},
                { 0, 13,  0,  0, /**/ 15,  0,  3,  0, /**/  0, 14,  8,  0, /**/ 16,  0,  0,  0},
                { 5,  8,  0,  0, /**/  1,  0,  0,  0, /**/  2,  0,  0,  0, /**/ 13,  9, 15,  0},
                { 0,  0, 12,  4, /**/  0,  6, 16,  0, /**/ 13,  0,  0,  7, /**/  0,  0,  0,  5},

                { 0,  3,  0,  0, /**/ 12,  0,  0,  0, /**/  6,  0,  0,  4, /**/ 11,  0,  0, 16},
                { 0,  7,  0,  0, /**/ 16,  0,  5,  0, /**/ 14,  0,  0,  1, /**/  0,  0,  2,  0},
                {11,  1, 15,  9, /**/  0,  0, 13,  0, /**/  0,  2,  5,  0, /**/  0, 14,  0, 10},
                { 6, 14,  0,  0, /**/  0, 11,  0,  2, /**/  0,  8,  0, 13, /**/ 12,  0,  0, 15},
        };
        
        Integer[][] expected = {
                { 1,  5, 10,  2, /**/  3,  4,  9, 11, /**/ 12, 16,  6, 14, /**/ 15, 13,  7,  8},
                {14, 16,  8, 13, /**/  5, 15,  7, 12, /**/  4,  3,  1,  2, /**/  9, 10,  6, 11},
                { 4, 12,  9,  7, /**/ 10, 16,  6,  1, /**/  8, 13, 15, 11, /**/  5,  3, 14,  2},
                { 3,  6, 11, 15, /**/  2, 13,  8, 14, /**/ 10,  5,  7,  9, /**/  4, 16, 12,  1},

                {13,  4, 14,  3, /**/  8,  7, 11, 10, /**/  5, 12,  2,  6, /**/  1, 15, 16,  9},
                { 8, 11,  7,  6, /**/  4,  1,  2, 16, /**/  9, 10, 14, 15, /**/  3, 12,  5, 13},
                {12,  9,  1, 10, /**/ 13,  5, 15,  3, /**/  7,  4, 16,  8, /**/ 14,  2, 11,  6},
                {16, 15,  2,  5, /**/  9, 12, 14,  6, /**/  1, 11, 13,  3, /**/ 10,  4,  8,  7},

                { 7,  2, 16, 14, /**/ 11,  9,  4, 13, /**/ 15,  1, 12,  5, /**/  8,  6, 10,  3},
                { 9, 13,  6,  1, /**/ 15,  2,  3,  5, /**/ 11, 14,  8, 10, /**/ 16,  7,  4, 12},
                { 5,  8,  3, 11, /**/  1, 10, 12,  7, /**/  2,  6,  4, 16, /**/ 13,  9, 15, 14},
                {15, 10, 12,  4, /**/ 14,  6, 16,  8, /**/ 13,  9,  3,  7, /**/  2, 11,  1,  5},

                { 2,  3,  5,  8, /**/ 12, 14, 10, 15, /**/  6,  7,  9,  4, /**/ 11,  1, 13, 16},
                {10,  7, 13, 12, /**/ 16,  3,  5,  9, /**/ 14, 15, 11,  1, /**/  6,  8,  2,  4},
                {11,  1, 15,  9, /**/  6,  8, 13,  4, /**/ 16,  2,  5, 12, /**/  7, 14,  3, 10},
                { 6, 14,  4, 16, /**/  7, 11,  1,  2, /**/  3,  8, 10, 13, /**/ 12,  5,  9, 15}
        };

        sudokuSolver = new DancingLinksSudokuSolver();
        List<Integer[][]> actual = sudokuSolver.solve(initialState);
        SudokuUtil.printSudokuBoard(actual);
        assertEquals(1, actual.size());
        assertArrayEquals(expected, actual.get(0));
    }

    @Test
    void sudoku_16x16_hard_OneSolution() {
        int[][] initialState = {
                { 1,  8,  0,  0, /**/ 14,  0,  0,  4, /**/  0, 16,  0,  0, /**/  2,  0,  0,  7},
                { 0,  0, 14, 13, /**/  0,  0,  3,  6, /**/  0, 10,  0,  0, /**/  0,  0, 16,  0},
                {12,  0,  0,  9, /**/ 15,  0, 10,  0, /**/  0,  0,  3,  0, /**/  0,  4,  0,  0},
                { 0, 10,  3,  0, /**/  0,  0,  2,  0, /**/  0, 14,  9, 13, /**/ 11,  0,  0,  0},

                { 0, 14,  0, 11, /**/  7,  5,  0, 10, /**/  0,  3,  0,  0, /**/  8,  0,  0,  0},
                { 9,  3, 12,  0, /**/  0,  0,  0,  0, /**/  0,  0,  0,  0, /**/  0, 15,  7,  0},
                { 2,  0,  0,  0, /**/  0,  0,  0,  0, /**/ 16,  0,  7,  0, /**/  0,  6,  0, 13},
                { 0,  0, 13,  5, /**/  0,  0,  0,  3, /**/  0,  0, 12, 11, /**/  0,  0, 14,  0},

                { 0,  0,  0,  0, /**/ 11, 12,  0,  0, /**/  5, 15,  0,  0, /**/  0, 13,  0, 10},
                { 0,  0,  0,  0, /**/  0, 14,  5,  9, /**/  0,  0,  8,  0, /**/  0, 11,  0,  0},
                {15,  0, 16,  2, /**/  0,  7,  4,  0, /**/  0, 12,  0,  0, /**/  0,  0,  0,  6},
                { 0,  0,  1,  0, /**/  0,  0,  6, 13, /**/  0,  0,  0,  0, /**/  9,  0,  0, 12},

                { 0,  6,  0,  0, /**/  1,  0, 13,  0, /**/ 11,  0,  0, 16, /**/ 15,  0,  0,  0},
                { 0,  0,  0, 16, /**/  0,  4,  0,  0, /**/  0,  5,  0, 15, /**/  0,  0,  0,  3},
                {14,  0,  0,  1, /**/  2,  0, 11,  0, /**/  0,  0,  0,  0, /**/  5,  0,  0,  8},
                { 0,  5,  0,  0, /**/  0,  8,  0,  0, /**/  9,  2,  4,  0, /**/  0,  0, 12, 14}
        };

        Integer[][] expected = {
                { 1,  8, 15, 6, 14, 13, 9, 4, 12, 16, 11, 5, 2, 3, 10, 7},
                {11,  2, 14, 13, 8, 1, 3, 6, 4, 10, 15, 7, 12, 9, 16, 5},
                {12, 16,  5, 9, 15, 11, 10, 7, 2, 8, 3, 6, 14, 4, 13, 1},
                { 4, 10,  3, 7, 5, 16, 2, 12, 1, 14, 9, 13, 11, 8, 6, 15},
                {16, 14,  6, 11, 7, 5, 15, 10, 13, 3, 2, 4, 8, 12, 1, 9},
                { 9,  3, 12, 8, 13, 2, 16, 1, 10, 6, 5, 14, 4, 15, 7, 11},
                { 2, 15, 10, 4, 12, 9, 14, 11, 16, 1, 7, 8, 3, 6, 5, 13},
                { 7,  1, 13, 5, 4, 6, 8, 3, 15, 9, 12, 11, 10, 2, 14, 16},
                { 6,  9,  8, 14, 11, 12, 1, 2, 5, 15, 16, 3, 7, 13, 4, 10},
                {13, 12,  7, 10, 3, 14, 5, 9, 6, 4, 8, 1, 16, 11, 15, 2},
                {15, 11, 16, 2, 10, 7, 4, 8, 14, 12, 13, 9, 1, 5, 3, 6},
                { 5,  4,  1, 3, 16, 15, 6, 13, 7, 11, 10, 2, 9, 14, 8, 12},
                { 8,  6,  9, 12, 1, 3, 13, 5, 11, 7, 14, 16, 15, 10, 2, 4},
                {10, 13,  2, 16, 9, 4, 12, 14, 8, 5, 1, 15, 6, 7, 11, 3},
                {14,  7,  4, 1, 2, 10, 11, 15, 3, 13, 6, 12, 5, 16, 9, 8},
                { 3,  5, 11, 15, 6, 8, 7, 16, 9, 2, 4, 10, 13, 1, 12, 14},
        };

        sudokuSolver = new DancingLinksSudokuSolver();
        List<Integer[][]> actual = sudokuSolver.solve(initialState);
        SudokuUtil.printSudokuBoard(actual);
        assertEquals(1, actual.size());
        assertArrayEquals(expected, actual.get(0));
    }

    @Test
    void sudoku_16x16_medium_MultipleSolutions() {
        int[][] initialState = {
                { 0,  0,  0,  0, /**/  0, 12,  0,  8, /**/  0, 15,  0, 13, /**/  6,  0,  0,  4},
                {12,  5, 16,  0, /**/  0, 15, 13, 11, /**/  0,  0,  0,  0, /**/  0, 10,  2,  0},
                { 0,  0,  4,  2, /**/  0,  9,  0,  0, /**/  0,  0, 12,  6, /**/  0, 15,  3,  0},
                { 0,  0,  0, 10, /**/  3,  4,  0,  5, /**/  0,  0,  7, 14, /**/  0,  0,  0,  0},

                { 6,  0,  2, 13, /**/  0,  5, 16,  1, /**/ 15,  8,  0,  0, /**/  4,  0,  0,  0},
                { 5,  0,  0,  0, /**/ 15,  2,  0,  0, /**/  0, 12,  0,  0, /**/  8,  0,  0, 11},
                { 1,  0,  0,  0, /**/ 14,  0,  9,  0, /**/ 16,  3,  0,  0, /**/ 12,  0,  0, 15},
                { 0, 12,  0, 15, /**/  0,  0,  0,  0, /**/  7,  4, 13,  5, /**/ 10,  0,  1,  0},

                { 0,  4, 14,  0, /**/  8,  0,  0,  0, /**/  6,  0,  0,  3, /**/  0,  0,  0,  1},
                { 0,  8,  0,  0, /**/  0,  0,  0,  0, /**/ 11,  1,  0,  0, /**/  0,  0,  0, 16},
                { 0,  0,  0,  0, /**/  1, 10, 15,  0, /**/  0,  0,  0,  0, /**/  0,  0,  6,  7},
                { 2,  1,  0,  0, /**/  6,  3,  0,  0, /**/  0,  0,  0,  0, /**/  0,  0,  0, 13},

                { 4,  2,  0, 12, /**/  0,  6,  0, 15, /**/  0, 10,  3,  1, /**/ 16,  0,  0,  0},
                { 0,  0,  0,  0, /**/  0, 11,  0,  0, /**/  0,  0,  0, 15, /**/ 13,  7,  0,  0},
                { 9, 10, 13,  5, /**/  0,  0,  0,  4, /**/  0,  0,  0,  0, /**/  2,  0,  0,  6},
                { 0, 16,  0,  0, /**/  0, 14,  0,  3, /**/  9,  0,  2,  0, /**/  1,  0,  4, 12}
        };

        Integer[][] expected = {
                { 7,  9, 11,  3, /**/  2, 12, 14,  8, /**/  5, 15, 10, 13, /**/  6,  1, 16,  4},
                {12,  5, 16,  6, /**/  7, 15, 13, 11, /**/  3,  9,  1,  4, /**/ 14, 10,  2,  8},
                {13, 14,  4,  2, /**/ 10,  9,  1, 16, /**/  8, 11, 12,  6, /**/  7, 15,  3,  5},
                { 8, 15,  1, 10, /**/  3,  4,  6,  5, /**/  2, 16,  7, 14, /**/ 11, 13, 12,  9},

                { 6, 11,  2, 13, /**/ 12,  5, 16,  1, /**/ 15,  8, 14, 10, /**/  4,  9,  7,  3},
                { 5,  3, 10, 14, /**/ 15,  2,  4,  7, /**/  1, 12,  6,  9, /**/  8, 16, 13, 11},
                { 1,  7,  8,  4, /**/ 14, 13,  9, 10, /**/ 16,  3, 11,  2, /**/ 12,  6,  5, 15},
                {16, 12,  9, 15, /**/ 11,  8,  3,  6, /**/  7,  4, 13,  5, /**/ 10, 14,  1,  2},

                {15,  4, 14,  7, /**/  8, 16, 11,  2, /**/  6, 13,  5,  3, /**/  9, 12, 10,  1},
                {10,  8,  6,  9, /**/  4,  7,  5, 13, /**/ 11,  1, 15, 12, /**/  3,  2, 14, 16},
                { 3, 13, 12, 11, /**/  1, 10, 15,  9, /**/ 14,  2,  4, 16, /**/  5,  8,  6,  7},
                { 2,  1,  5, 16, /**/  6,  3, 12, 14, /**/ 10,  7,  9,  8, /**/ 15,  4, 11, 13},

                { 4,  2,  7, 12, /**/  5,  6,  8, 15, /**/ 13, 10,  3,  1, /**/ 16, 11,  9, 14},
                {14,  6,  3,  1, /**/  9, 11,  2, 12, /**/  4,  5, 16, 15, /**/ 13,  7,  8, 10},
                { 9, 10, 13,  5, /**/ 16,  1,  7,  4, /**/ 12, 14,  8, 11, /**/  2,  3, 15,  6},
                {11, 16, 15,  8, /**/ 13, 14, 10,  3, /**/  9,  6,  2,  7, /**/  1,  5,  4, 12}
        };

        sudokuSolver = new DancingLinksSudokuSolver();
        List<Integer[][]> actual = sudokuSolver.solve(initialState);
        SudokuUtil.printSudokuBoard(actual);
        assertArrayEquals(expected, actual.get(0));
    }


    @Test
    void sudoku_25x25_OneSolution() {
        int[][] initialState = {
                { 0,  2,  0,  0,  0, /**/  3, 14,  0,  8,  0, /**/  0,  0,  0,  0,  0, /**/  0,  0, 13,  4, 24, /**/  0,  7,  1,  0,  0},
                { 0, 10, 17,  0,  0, /**/  0,  6, 18,  0,  0, /**/ 22, 16,  0, 12,  0, /**/  0,  0,  0,  1,  0, /**/  0,  0, 13, 19,  0},
                { 0, 15, 24, 13,  7, /**/  0,  0,  0,  4,  0, /**/ 10,  0,  0,  3, 14, /**/  0, 18,  0,  0,  0, /**/  0, 22,  2,  6,  0},
                { 0,  0,  1, 21,  0, /**/  0, 15,  0, 22,  0, /**/  0, 19, 13,  0,  0, /**/  0,  8,  0,  0,  0, /**/  0, 16, 18, 20,  0},
                { 0,  5,  0,  0, 20, /**/  7, 25, 19,  0,  0, /**/  0, 21, 17, 18,  2, /**/ 10, 12, 22,  9, 15, /**/ 11,  0,  0,  0,  0},

                {11,  0,  0,  0, 22, /**/  8,  0, 24,  7,  1, /**/  5,  0,  0,  0, 13, /**/ 16, 17, 25, 23,  2, /**/  4,  0,  6,  0, 19},
                {16,  9, 12,  0, 17, /**/  0, 19, 22,  0,  0, /**/  0,  0, 18, 21,  0, /**/  0, 20,  6, 13,  0, /**/  7,  0,  0, 23, 11},
                { 0,  0,  6,  0, 21, /**/  9, 16,  0,  3,  0, /**/  0, 22, 20, 19,  0, /**/  0,  0,  0, 15,  8, /**/ 25,  0,  0,  0,  0},
                { 0,  0, 23,  5,  0, /**/  2,  0,  0, 11, 17, /**/  8,  0,  0,  0, 16, /**/ 12,  9,  0,  0, 21, /**/  0,  3, 10,  0,  0},
                { 0,  0,  0,  0,  0, /**/  6,  0,  0, 12,  0, /**/  9,  1, 25,  0,  3, /**/  0, 11,  0,  0,  7, /**/  0,  0, 21,  0,  0},

                { 0,  0,  9,  0,  0, /**/ 23,  0,  5, 17,  4, /**/ 16,  0, 11,  0, 22, /**/ 18,  2,  0, 21, 13, /**/  0,  0,  7,  0,  0},
                { 4,  6,  0,  0,  5, /**/  0,  0,  2,  0,  0, /**/  0, 18, 21, 24,  0, /**/  0,  0,  3,  0, 12, /**/ 23,  0,  0, 17,  0},
                { 0,  0,  0, 12, 11, /**/  0,  7,  3,  0, 24, /**/ 17, 20, 15, 13, 19, /**/  1,  0,  5,  8,  0, /**/  6,  9,  0,  0,  0},
                { 0, 22,  0,  0, 14, /**/ 19,  0,  6, 16,  0, /**/  0,  8,  9,  7,  0, /**/  0,  0, 24,  0,  0, /**/  3,  0,  0,  1, 18},
                { 0,  0, 21,  0,  0, /**/ 25, 13,  0, 20,  8, /**/ 12,  0, 14,  0, 10, /**/  9, 16, 15,  0,  6, /**/  0,  0,  4,  0,  0},

                { 0,  0, 25,  0,  0, /**/ 24,  0,  0, 18,  0, /**/  4,  0,  3, 10,  5, /**/  0,  1,  0,  0, 14, /**/  0,  0,  0,  0,  0},
                { 0,  0,  5,  3,  0, /**/ 17,  0,  0, 23,  7, /**/ 13,  0,  0,  0, 18, /**/ 19, 21,  0,  0, 22, /**/  0, 11, 12,  0,  0},
                { 0,  0,  0,  0, 18, /**/ 10,  8,  0,  0,  0, /**/  0, 25, 23,  2,  0, /**/  0,  5,  0, 16, 11, /**/  9,  0,  3,  0,  0},
                {17, 20,  0,  0,  2, /**/  0, 22, 16,  6,  0, /**/  0,  7, 12,  0,  0, /**/  0,  0,  9,  3,  0, /**/ 18,  0, 23, 24, 25},
                { 6,  0,  4,  0, 16, /**/  1, 11, 12, 25,  3, /**/ 19,  0,  0,  0, 21, /**/ 17, 23,  8,  0, 18, /**/  2,  0,  0,  0, 14},

                { 0,  0,  0,  0,  4, /**/ 14, 24, 11, 19, 23, /**/ 21, 17, 16,  8,  0, /**/  0,  0,  1,  2,  9, /**/ 13,  0,  0,  0,  0},
                { 0,  1, 14, 23,  0, /**/  0,  0,  0,  9,  0, /**/  0,  0, 19,  5,  0, /**/  0, 24,  0, 12,  0, /**/  0,  8,  0,  0,  0},
                { 0, 16, 11,  8,  0, /**/  0,  0,  0,  1,  0, /**/  6,  4,  0,  0, 23, /**/  0, 15,  0,  0,  0, /**/ 14, 12,  9, 10,  0},
                { 0, 21,  3,  0,  0, /**/  0, 17,  0,  0,  0, /**/  0, 15,  0, 25, 20, /**/  0,  0,  4, 10,  0, /**/  0,  0, 16, 11,  0},
                { 0,  0, 20,  2,  0, /**/ 16,  5,  8,  0,  0, /**/  0,  0,  0,  0,  0, /**/  0,  6,  0, 19, 25, /**/  0,  0,  0,  3,  0}
        };
        Integer[][] expected = {
                {18,  2, 22, 19,  9, /**/  3, 14, 17,  8, 16, /**/ 15, 23,  5, 20,  6, /**/ 11, 25, 13,  4, 24, /**/ 10,  7,  1, 21, 12},
                {14, 10, 17, 11,  8, /**/  5,  6, 18, 21,  9, /**/ 22, 16,  4, 12, 24, /**/  2,  7, 23,  1, 20, /**/ 15, 25, 13, 19,  3},
                {25, 15, 24, 13,  7, /**/ 20,  1, 23,  4, 12, /**/ 10, 11,  8,  3, 14, /**/ 21, 18, 16,  5, 19, /**/ 17, 22,  2,  6,  9},
                {23,  4,  1, 21, 12, /**/ 11, 15, 10, 22,  2, /**/  7, 19, 13,  9, 25, /**/  6,  8, 17, 14,  3, /**/ 24, 16, 18, 20,  5},
                { 3,  5, 16,  6, 20, /**/  7, 25, 19, 24, 13, /**/  1, 21, 17, 18,  2, /**/ 10, 12, 22,  9, 15, /**/ 11, 23, 14,  8,  4},

                {11,  3, 18, 15, 22, /**/  8, 21, 24,  7,  1, /**/  5, 12, 10, 14, 13, /**/ 16, 17, 25, 23,  2, /**/  4, 20,  6,  9, 19},
                {16,  9, 12, 25, 17, /**/  4, 19, 22,  5, 10, /**/ 24,  2, 18, 21, 15, /**/  3, 20,  6, 13,  1, /**/  7, 14,  8, 23, 11},
                { 2,  7,  6,  4, 21, /**/  9, 16, 13,  3, 18, /**/ 23, 22, 20, 19, 11, /**/  5, 14, 10, 15,  8, /**/ 25,  1, 24, 12, 17},
                {19, 14, 23,  5,  1, /**/  2, 20, 25, 11, 17, /**/  8,  6,  7,  4, 16, /**/ 12,  9, 18, 24, 21, /**/ 22,  3, 10, 13, 15},
                {20,  8, 10, 24, 13, /**/  6, 23, 15, 12, 14, /**/  9,  1, 25, 17,  3, /**/  4, 11, 19, 22,  7, /**/  5,  2, 21, 18, 16},

                {24, 19,  9,  1, 25, /**/ 23, 10,  5, 17,  4, /**/ 16,  3, 11,  6, 22, /**/ 18,  2, 20, 21, 13, /**/ 12, 15,  7, 14,  8},
                { 4,  6,  8, 16,  5, /**/ 22,  9,  2, 15, 11, /**/ 25, 18, 21, 24,  1, /**/ 14, 19,  3,  7, 12, /**/ 23, 13, 20, 17, 10},
                {10, 23,  2, 12, 11, /**/ 18,  7,  3, 14, 24, /**/ 17, 20, 15, 13, 19, /**/  1, 22,  5,  8,  4, /**/  6,  9, 25, 16, 21},
                {15, 22, 13, 20, 14, /**/ 19, 12,  6, 16, 21, /**/  2,  8,  9,  7,  4, /**/ 25, 10, 24, 17, 23, /**/  3,  5, 11,  1, 18},
                { 7, 18, 21, 17,  3, /**/ 25, 13,  1, 20,  8, /**/ 12,  5, 14, 23, 10, /**/  9, 16, 15, 11,  6, /**/ 19, 24,  4,  2, 22},

                { 8, 11, 25,  7, 23, /**/ 24,  2, 21, 18, 20, /**/  4,  9,  3, 10,  5, /**/ 15,  1, 12,  6, 14, /**/ 16, 17, 19, 22, 13},
                { 1, 24,  5,  3, 10, /**/ 17,  4,  9, 23,  7, /**/ 13, 14,  6, 16, 18, /**/ 19, 21,  2, 25, 22, /**/  8, 11, 12, 15, 20},
                {21, 12, 15, 22, 18, /**/ 10,  8, 14, 13, 19, /**/ 20, 25, 23,  2, 17, /**/ 24,  5,  7, 16, 11, /**/  9,  6,  3,  4,  1},
                {17, 20, 19, 14,  2, /**/ 15, 22, 16,  6,  5, /**/ 11,  7, 12,  1,  8, /**/ 13,  4,  9,  3, 10, /**/ 18, 21, 23, 24, 25},
                { 6, 13,  4,  9, 16, /**/  1, 11, 12, 25,  3, /**/ 19, 24, 22, 15, 21, /**/ 17, 23,  8, 20, 18, /**/  2, 10,  5,  7, 14},

                {22, 25,  7, 10,  4, /**/ 14, 24, 11, 19, 23, /**/ 21, 17, 16,  8, 12, /**/ 20,  3,  1,  2,  9, /**/ 13, 18, 15,  5,  6},
                {13,  1, 14, 23, 15, /**/ 21, 18,  4,  9,  6, /**/  3, 10, 19,  5,  7, /**/ 22, 24, 11, 12, 16, /**/ 20,  8, 17, 25,  2},
                { 5, 16, 11,  8, 19, /**/ 13,  3, 20,  1, 25, /**/  6,  4,  2, 22, 23, /**/  7, 15, 21, 18, 17, /**/ 14, 12,  9, 10, 24},
                { 9, 21,  3, 18,  6, /**/ 12, 17,  7,  2, 22, /**/ 14, 15, 24, 25, 20, /**/  8, 13,  4, 10,  5, /**/  1, 19, 16, 11, 23},
                {12, 17, 20,  2, 24, /**/ 16,  5,  8, 10, 15, /**/ 18, 13,  1, 11,  9, /**/ 23,  6, 14, 19, 25, /**/ 21,  4, 22,  3,  7}
        };

        sudokuSolver = new DancingLinksSudokuSolver();
        List<Integer[][]> actual = sudokuSolver.solve(initialState);
        SudokuUtil.printSudokuBoard(actual);
        assertEquals(1, actual.size());
        assertArrayEquals(expected, actual.get(0));
    }

}